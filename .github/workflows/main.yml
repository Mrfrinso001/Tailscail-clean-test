name: Tailscale Ghost Cleaner

on:
  workflow_dispatch:

jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Cleanup Ghost Devices
        env:
          APIKEY: ${{ secrets.TAILSCALE_API_KEY }}
        run: |
          set -e

          # URL-encoded tailnet name (Outlook email)
          tailnet="mrfrinso001%40outlook.com"
          api="https://api.tailscale.com/api/v2/tailnet/$tailnet/machines"

          echo "📡 Fetching devices for Tailnet $tailnet"
          resp=$(curl -s -H "Authorization: Bearer $APIKEY" "$api")

          echo "================ RAW RESPONSE ================"
          echo "$resp"
          echo "=============================================="

          echo "📋 All devices (id, name, hostname, lastSeen):"
          echo "$resp" | jq '.machines[]? | {id,name,hostname,lastSeen}'

          # Collect all rdp-ci-node*
          ids=$(echo "$resp" | jq -r '.machines[]? | select(.name|startswith("rdp-ci-node") or .hostname|startswith("rdp-ci-node")) | .id')

          if [ -z "$ids" ]; then
            echo "✅ No rdp-ci-node machines found."
            exit 0
          fi

          # Keep the most recent by lastSeen
          newest=$(echo "$resp" | jq -r '.machines | map(select((.name|startswith("rdp-ci-node")) or (.hostname|startswith("rdp-ci-node")))) | max_by(.lastSeen).id')
          echo "👉 Keeping newest: $newest"

          for id in $ids; do
            if [ "$id" != "$newest" ]; then
              echo "🗑 Deleting ghost: $id"
              curl -s -H "Authorization: Bearer $APIKEY" -X DELETE "https://api.tailscale.com/api/v2/device/$id" >/dev/null
            else
              echo "👍 Keeping active: $id"
            fi
          done

          echo "📋 Devices after cleanup:"
          curl -s -H "Authorization: Bearer $APIKEY" "$api" | jq '.machines[]? |
