name: Tailscale Ghost Cleaner

on:
  workflow_dispatch:     # run manually
  schedule:
    - cron: "0 */12 * * *"

jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Cleanup Ghosts
        env:
          APIKEY: ${{ secrets.TAILSCALE_API_KEY }}
        run: |
          set -e
          
          # 👇 replace with the Tailnet shown in `whoami` (not .ts.net)
          tailnet="mrfrinso001.github"
          api="https://api.tailscale.com/api/v2/tailnet/$tailnet/machines"

          echo "📡 Fetching devices from $api ..."
          resp=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer $APIKEY" "$api")

          body=$(echo "$resp" | head -n -1)
          status=$(echo "$resp" | tail -n1)

          if [ "$status" != "200" ]; then
            echo "❌ ERROR: API call failed (HTTP $status)"
            echo "$body"
            exit 1
          fi

          echo "📋 Current devices:"
          echo "$body" | jq '.machines[] | {hostname,id,lastSeen}'

          ids=$(echo "$body" | jq -r '.machines[] | select(.hostname | startswith("rdp-ci-node")) | .id')
          if [ -z "$ids" ]; then
            echo "✅ No ghosts"
            exit 0
          fi

          newest=$(echo "$body" | jq -r '.machines | map(select(.hostname | startswith("rdp-ci-node"))) | max_by(.lastSeen).id')
          echo "👉 Keeping newest: $newest"

          for id in $ids; do
            if [ "$id" != "$newest" ]; then
              echo "🗑 Deleting ghost: $id"
              curl -s -H "Authorization: Bearer $APIKEY" -X DELETE "https://api.tailscale.com/api/v2/device/$id" >/dev/null
            fi
          done

          echo "📋 Devices after cleanup:"
          curl -s -H "Authorization: Bearer $APIKEY" "$api" | jq '.machines[] | {hostname,id,lastSeen}'
