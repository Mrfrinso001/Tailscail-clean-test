name: Tailscale Ghost Cleaner

on:
  workflow_dispatch:    # allow manual run
  schedule:
    - cron: '0 */12 * * *'   # run every 12 hours (adjust if needed)

jobs:
  ghost-clean:
    runs-on: ubuntu-latest   # Linux runner is fine

    steps:
      - name: Cleanup old Tailscale ghosts
        shell: pwsh
        env:
          TAILSCALE_API_KEY: ${{ secrets.TAILSCALE_API_KEY }}
        run: |
          $tailnet     = "taila2a6d7.ts.net"
          $machinesUrl = "https://api.tailscale.com/api/v2/tailnet/$tailnet/machines"

          Write-Host "üì° Fetching machine list for tailnet: $tailnet"

          # Proper: capture raw JSON string
          $resp = curl -s -u "$env:TAILSCALE_API_KEY:`"" $machinesUrl | Out-String

          if (-not $resp) { Write-Host "‚ùå No response from Tailscale API"; exit 0 }

          try {
            $machines = ($resp | ConvertFrom-Json).machines
          } catch {
            Write-Host "‚ùå Failed to parse JSON: $resp"
            exit 1
          }

          if (-not $machines) { Write-Host "‚úÖ No machines found in tailnet."; exit 0 }

          $targets = $machines | Where-Object { $_.hostname -like "rdp-ci-node*" }

          if (-not $targets) {
            Write-Host "‚úÖ No rdp-ci-node machines found."
            exit 0
          }

          # Sort by lastSeen, keep only newest
          $latest = $targets | Sort-Object lastSeen -Descending | Select-Object -First 1
          Write-Host "Keeping newest node: $($latest.hostname) id=$($latest.id)"

          $ghosts = $targets | Where-Object { $_.id -ne $latest.id }

          if (-not $ghosts) {
            Write-Host "‚úÖ No ghosts to delete."
          } else {
            foreach ($g in $ghosts) {
              $deviceId = [string]$g.id
              if (-not $deviceId) { $deviceId = [string]$g.stableId }
              Write-Host "üóë Deleting ghost: $($g.hostname) id=$deviceId"
              $deleteUrl = "https://api.tailscale.com/api/v2/device/$deviceId"
              $delResp = curl -s -X DELETE -u "$env:TAILSCALE_API_KEY:`"" $deleteUrl | Out-String
              Write-Host "API Response: $delResp"
            }
          }

          # Print updated list again
          $resp2 = curl -s -u "$env:TAILSCALE_API_KEY:`"" $machinesUrl | Out-String
          Write-Host "üìã Machines after cleanup:"
          $resp2
